// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Para mais detalhes: https://www.prisma.io/docs/concepts/components/prisma-schema

model Produto {
  id Int @id @default(autoincrement())
  nome String @db.VarChar(100)
  preco Decimal @db.Decimal(12,2) // independe do fornecedor, talvez não seja o mais correto, mas é só um exemplo
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  // Associação com Categoria - Produto é de uma única Categoria (N -> 1)
  categoriaId Int
  categoria Categoria @relation(fields: [categoriaId], references: [id])

  // Produtos tem vários fornecedotes (N - N)
  fornecedores Fornecedor[]

  itensNota ItemNotaFiscal[]

  @@map("produtos")
}

model Fornecedor{
  id Int @id @default(autoincrement())
  nome String @db.VarChar(100)
  cnpj Decimal @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  // Fornecedor fornece vários produtos (N - N)
  produtos Produto[]

  @@map("fornecedores")
}

model Categoria{
  id Int @id @default(autoincrement())
  nome String @db.VarChar(50)
  
  // Associação com Produtos - Categoria é associada a vários Produtos
  produtos Produto[]

  @@map("categorias")
}

model Usuario{
  id Int @id @default(autoincrement())
  email String @db.VarChar(100) @unique
  senha String @db.VarChar(50)

  @@map("usuarios")
}

model NotaFiscal{
  id Int @id @default(autoincrement())
  cpfCliente String @db.VarChar(20)
  dataVenda DateTime
  enderecoEntrega String @db.VarChar(100)

  itemNotaFiscal ItemNotaFiscal[]

  @@map("notasfiscais")
}

model ItemNotaFiscal{
  id Int @id @default(autoincrement())

  notaFiscalId Int
  notaFiscal NotaFiscal @relation(fields: [notaFiscalId], references: [id])

  produtoId Int
  produto Produto @relation(fields: [produtoId], references: [id])

  quantidade Int
  valorUnitario Decimal @db.Decimal(12,2)

  @@map("itemnotafiscal")
}

// Sistema acadêmico - Avaliação

model Curso {
  id Int @id @default(autoincrement())
  nome String @db.VarChar(50)
  descricao String @db.VarChar(2000)
  professorId Int
  coordenador Professor @relation(fields: [professorId], references: [id])
  aluno Aluno[]
  turma Turma[]

  @@map("cursos")
}

model Professor {
  id Int @id @default(autoincrement())
  nome String @db.VarChar(100)
  lattes String @db.VarChar(100)
  telefone String @db.VarChar(30)
  email String @db.VarChar(100)

  coordena Curso[]
  turma Turma[]

  @@map("professores")
}

model SalaAula {
  id Int @id @default(autoincrement())
  tipo String @db.VarChar(50)
  projetorOuTv Boolean
  bloco String @db.VarChar(30)
  turma Turma[]

  @@map("salasaula")
}

model Disciplina {
  id Int @id @default(autoincrement())
  nome String @db.VarChar(100)
  ementa String @db.VarChar(500)
  cargaHoraria Int

  itemBibliografia ItemBibliografia[]
  materialDidatico MaterialDidatico[]
  turma Turma[]

  @@map("disciplinas")
}

model ItemBibliografia {
  id Int @id @default(autoincrement())
  tipo String @db.VarChar(20) // Principal ou Complementares
  autores String @db.VarChar(200)
  titulo String @db.VarChar(100)
  isbn String? @db.VarChar(50)
  disciplinaId Int
  disciplina Disciplina @relation(fields: [disciplinaId], references: [id])

  @@map("itembibliografias")
}

model MaterialDidatico {
  id Int @id @default(autoincrement())
  nomeArquivoOriginal String @db.VarChar(100)
  nomeArquivoInterno String @db.VarChar(100) @unique
  autores String @db.VarChar(200)
  disciplinaId Int
  disciplina Disciplina @relation(fields: [disciplinaId], references: [id])

  @@map("materiaisdidaticos")
}

model Aluno {
  id Int @id @default(autoincrement())
  nome String @db.VarChar(100)
  cursoId Int
  telefone String @db.VarChar(30)
  email String @db.VarChar(100)
  curso Curso @relation(fields: [cursoId], references: [id])

  solicitacao Solicitacao[]
  alunoTurma AlunoTurma[]

  @@map("alunos")
}

model Solicitacao {
  id Int @id @default(autoincrement())
  assunto String @db.VarChar(100)
  descricao String @db.VarChar(1000)
  dataAbertura DateTime @db.DateTime()
  alunoId Int
  aluno Aluno @relation(fields: [alunoId], references: [id])

  @@map("solicitacoes")
}

model Semestre {
  id Int @id @default(autoincrement())
  descricao String @db.VarChar(50)
  sigla String @db.VarChar(5)

  itemCalendario ItemCalendario[]
  turma Turma[]

  @@map("semestres")
}

model ItemCalendario {
  id Int @id @default(autoincrement())
  periodoDe DateTime @db.DateTime()
  periodoAte DateTime @db.DateTime()
  descricao String @db.VarChar(100)
  haveraAula Boolean
  semestreId Int
  semestre Semestre @relation(fields: [semestreId], references: [id])

  @@map("itemcalendarios")
}

model Turma {
  id Int @id @default(autoincrement())
  cursoId Int
  curso Curso @relation(fields: [cursoId], references: [id])
  salaAulaId Int
  salaAula SalaAula @relation(fields: [salaAulaId], references: [id])
  professorId Int
  professor Professor @relation(fields: [professorId], references: [id])
  disciplinaId Int
  disciplina Disciplina @relation(fields: [disciplinaId], references: [id])
  semestreId Int
  semestre Semestre @relation(fields: [semestreId], references: [id])

  alunoTurma AlunoTurma[]
  aula Aula[]
  prova Prova[]
}

model AlunoTurma {
  id Int @id @default(autoincrement())
  turmaId Int
  turma Turma @relation(fields: [turmaId], references: [id])
  alunoId Int
  aluno Aluno @relation(fields: [alunoId], references: [id])

  chamada Chamada[]

  @@unique([turmaId,alunoId])
  @@map("alunoturmas")
}

model Aula {
  id Int @id @default(autoincrement())
  conteudoProgramatico String @db.VarChar(200)
  dataProgramada DateTime @db.DateTime
  tecnicaMetodologica String @db.VarChar(100)
  turmaId Int
  turma Turma @relation(fields: [turmaId], references: [id])

  chamada Chamada[]
  @@map("aulas")
}

model Prova {
  id Int @id @default(autoincrement())
  dataProgramada DateTime @db.DateTime
  tipo String @db.VarChar(30) // presencial, remota, trabalho
  peso Int 
  turmaId Int
  turma Turma @relation(fields: [turmaId], references: [id])
  @@map("provas")
}

model Chamada {
  id Int @id @default(autoincrement())
  alunoTurmaId Int
  alunoTurma AlunoTurma @relation(fields: [alunoTurmaId], references: [id])
  aulaId Int
  aula Aula @relation(fields: [aulaId], references: [id])
  presente Boolean
  @@map("chamadas")
}